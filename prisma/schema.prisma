datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "fullTextSearchPostgres"]
}

generator zod {
  provider = "zod-prisma-types"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id String @id @default(ulid())

  username    String @unique // syarifhsb
  email       String @unique // syarifhsb@example.com
  phoneNumber String @unique // +33123456789

  firstName String // Syarif
  lastName  String // Hasibuan
  avatarUrl String? @default("https://api.dicebear.com/9.x/open-peeps/svg?seed=unknown")

  password Password?

  cart Cart?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  id String @id @default(ulid())

  hash String

  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(ulid())

  slug String @unique // butter-croissant
  name String @unique // Butter Croissant

  description String
  price       Decimal // EUR = â‚¬1.5

  stockQuantity Int @default(0)

  images ProductImage[]

  featured Boolean? @default(false)

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id String @id @default(ulid())

  url     String @unique // https://example.com/images/product.jpg
  altText String // A butter croissant

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(ulid())

  slug String @unique // short-bread
  name String @unique // Short Bread

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(ulid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id String @id @default(ulid())

  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  quantity Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
